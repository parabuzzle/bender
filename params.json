{"name":"Bender","tagline":"Bender is the IRC bot container that runs on Spunk","body":"#Install\r\n\r\n**Install Gems**\r\n```\r\n$ gem install spunk\r\n```\r\n\r\n**Grab Application**\r\n```\r\n$ git clone git://github.com/parabuzzle/bender.git\r\n```\r\n\r\n**Run It**\r\n```\r\n$ cd bender\r\n$ ruby bender.rb\r\n```\r\n\r\n\r\n##Configuration\r\nAll configuration is done through environment variables:\r\n\r\n  * IRC_LOG_FILE : The file to log to. defaults to `STDOUT`\r\n  * IRC_LOG_ROTATION : Log file rotation. defaults to `weekly`\r\n  * IRC_LOG_LEVEL : Log level. defaults to `INFO`\r\n  * IRC_USERNAME : The username for IRC. defaults to `bender`\r\n  * IRC_FULLNAME : The full name for IRC. defaults to `Bender Bending Rodriguez`\r\n  * IRC_NICKNAME : The actual IRC nickname. defaults to `bender`\r\n  * IRC_HOSTNAME : The irc server to connect to. defaults to `localhost`\r\n  * IRC_PORT : The irc port. defaults to `6667`\r\n  * IRC_TOKEN : The IRC Server's password. defaults to `nil`\r\n  * NICKSERV_PASSWORD : The password to send to nickserv's identify command. defaults to `nil`\r\n  * IRC_ROOMS : A comma-delimited list of rooms to connect to on start up. defaults to `nil`\r\n  * IRC_ACCEPT_INVITES : Tells bender to respond to invites. defaults to `true`\r\n  * IRC_USE_SSL : Use SSL. defaults to `false`\r\n  * DISABLE_HTTP : If present, Bender will skip starting the HTTP server\r\n  * HTTP_LOG_FILE : The file to log Webrick logs to. defaults to `STDOUT`\r\n  * PORT : The port to listen on. defaults to `9091`\r\n  * HTTP_MAX_CLIENTS : The max webrick clients. defaults to `4`\r\n  * HTTP_LISTEN_ADDRESS : The webrick listen address. defaults to `0.0.0.0`\r\n  * PID_FILE : The pid file to use. defaults to `./bender.pid`\r\n\r\nAlso, if you set the http listener's log file to !BENDER_LOGGER the webrick log will use the same logger instance defined in the log section of the config script. These are separated out so that you can have your servlet access log separate from your application log.\r\n\r\n\r\n#Extending Bender\r\n*Let's face it... this is what you are interested in ;)*\r\n\r\n###Directory Structure\r\n```\r\n./bender.rb     #main routine - attaches to shell and runs the bot\r\n./start.sh      #runs main bender.rb and detaches\r\n./stop.sh       #uses the pid file to kill off the bender\r\n./config.yml    #configuration file\r\n./lib/          #directory with all needed libraries (classes/modules)\r\n./processors/   #directory for irc command processors\r\n./servlets/     #directory for servlets\r\n```\r\n\r\n###Autoloader\r\nWhen Bender starts, it auto loads everything so that you just put your extensions in the proper folders with the proper naming convention and restart the application for it to start working. NO EXTRA CONFIG!\r\n\r\n**Load Order**\r\n 1. Require all files in ./lib/*.rb\r\n 1. Require all files in ./servlets/*.rb\r\n 1. Require all files in ./processors/*.rb\r\n 1. Start processors - ./processors/*_processor.rb\r\n 1. Start servlets - ./servlets/*_servlet.rb\r\n\r\n**Autoload of Processors**\r\n\r\nThis is done by loading all ./processors/*_processor.rb files and camel casing the file name to load the class. *ie - base_processor.rb is loaded as BaseProcessor.new*\r\n\r\n**Autoload of Servlets**\r\n\r\nThis is done by loading all ./servlets/*_servlet.rb files and camel casing the file name to the class. *ie - stats_servlet.rb is loaded as StatsServlet.new*\r\n\r\nServlets also must have the mountpoint variable defined so that Bender knows what uri to mount your servlet class on...\r\n```\r\n@mountpoint = \"/stats\" # will load StatsServlet on /stats on your web server\r\n```\r\n\r\n**More info about creating processors and servlets in the next section**\r\n\r\n\r\n### Building an irc command processor\r\nThis is a simple IOC (inversion of control) style system where you define a class that implements the \"call\" method that takes a hash as its argument.\r\n\r\n**This is what a processor looks like:**\r\n```\r\nmodule BenderProcessor\r\n  class MyProcessor\r\n    def call(hash)\r\n      # helper variables\r\n      command = hash[:command]\r\n      origin = hash[:origin]\r\n      msg = hash[:msg]\r\n      bot = hash[:bot]\r\n      room = hash[:room]\r\n\r\n      if origin.nil?\r\n        # if origin is nil.. just exit the processor now...\r\n        return\r\n      end\r\n\r\n      if origin.nickname == bot.nickname\r\n        # if the bot is origin.. just exit the processor now...\r\n        return\r\n      end\r\n\r\n      # Parse Messages\r\n      # http://rubular.com is really good for coming up with regex ;)\r\n      case msg\r\n         when /^#{bot.nickname},?$/i\r\n           # match 'nickname'\r\n           # says \"Kiss my shiny metal ass\"\r\n           bot.say room, \"Kiss my shiny metal ass\"\r\n\r\n          when /^#{bot.nickname},? version$/i\r\n            # match 'nickname, version'\r\n            # says version\r\n            bot.say room, BENDER_VERSION\r\n\r\n          when /^#{bot.nickname}.? say hello/i\r\n            # match 'nickname, say hello'\r\n            # says \"Hello World\"\r\n            bot.say room, \"Hello World\"\r\n\r\n          when /^#{bot.nickname},? say goodbye/i\r\n            # match 'nickname, say goodbye'\r\n            # says \"Goodbye Cruel World\" and kicks its self out of the room\r\n            bot.say room, \"Goodbye Cruel World\"\r\n            bot.say room, \"/kick #{bot.nickname}\"\r\n\r\n      end # end case messages\r\n    end # end MyProcessor#call\r\n  end # end MyProcessor\r\nend # end BenderProcessor\r\n```\r\nYou simply put this code in ./processors/my_processor.rb and researt Bender for this to start working.\r\n\r\n*note - my_processor.rb matches the class name of MyProcessor*\r\n\r\n*also note - MyProcessor is in the BenderProcessor module... This is because Bender only loads processors within the BenderProcessor namespace - BenderProcessor::MyProcessor.new*\r\n\r\n\r\n### Building a servlet\r\nSince Bender uses webrick, creating a servlet for Bender is almost the same as creating an Abstract Servlet in Webrick. **ALMOST**... The only difference is that Bender will provide the Spunk Bot object in the request so that you can access the Spunk IRC bot from within the request to post messages to IRC or display IRC data to a webpage. This is done by inheriting from the BenderServlet class which has the bot.\r\n\r\n**This is what servlet looks like**\r\n```\r\nclass GitServlet < BenderServlet\r\n  # Provides a simple bridge of github url post hook data to IRC\r\n  # http://localhost:9091/gitirc?room=github\r\n  @mountpoint = \"/gitirc\" # required for Bender to know where to mount the servlet\r\n\r\n  def do_GET(request, response)\r\n    status = 200\r\n    content_type = \"text/html\"\r\n    body = \"bender version #{BENDER_VERSION}\"\r\n    body += \"\\n\"\r\n\r\n    response.status = status\r\n    response['Content-Type'] = content_type\r\n    response.body = body\r\n    response.body = body\r\n  end\r\n\r\n  def do_POST(request, response)\r\n    status, content_type, body = post_to_irc(request)\r\n\r\n    response.status = status\r\n    response['Content-Type'] = content_type\r\n    response.body = body\r\n  end\r\n\r\n  private\r\n\r\n  def post_to_irc(request)\r\n    bot_hash = {:rooms=>[], :payload=>nil}\r\n    request.query.collect do |key,value|\r\n      if key.match(/^room/)\r\n        bot_hash[:rooms] << '#' + value\r\n      end\r\n      if key.match(/^payload/)\r\n        bot_hash[:payload] = value\r\n      end\r\n    end\r\n    rooms = bot_hash[:rooms]\r\n    rooms.uniq!\r\n\r\n    if bot_hash[:payload]\r\n      j = JSON.parse(bot_hash[:payload])\r\n      repo = j['repository']['name']\r\n      compare = j['compare']\r\n      pusher = j['pusher']['name']\r\n      owner = j['repository']['owner']['name']\r\n      branch = j['ref']\r\n      unless pusher == \"name\"\r\n        rooms.each do |r|\r\n          unless $bot.joined_rooms.include? r\r\n            @bot.join_room r\r\n          end\r\n          @bot.say r, \"[git-push] #{pusher} pushed to #{owner}/#{repo} [ref: #{branch}]\"\r\n          @bot.say r, \"[git-push] #{compare}\"\r\n        end\r\n      end\r\n    end\r\n\r\n    return 200, \"text/plain\", \"accepted\"\r\n  end\r\nend\r\n```\r\nThis servlet will listen for a post from your github post hook on your repo and bridge the data in to the room provided. *ie - http://myserver.com:9019/gitirc?room=github will post to the #github room whenever you push to your repo*\r\n\r\nThis code should be put in to ./servlets/git_servlet.rb to be loaded as GitServlet on uri /gitirc\r\n\r\n*note the file name git_servlet.rb corresponds to the class name GitServlet*\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}